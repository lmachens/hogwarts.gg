-- POSTS
create table
  public.posts (
    id bigint generated by default as identity primary key,
    user_id uuid references public.users default auth.uid(),
    title text,
    short text,
    body text,
    image text,
    published boolean default false,
    published_at timestamp
    with
      time zone
  );


comment on table public.posts is 'Blog posts.';


-- Secure the tables
alter table
  public.posts enable row level security;


create policy "Allow everyone read access on public posts" on public.posts for
select
  using (published = true);


create policy "Allow authorized read access on all posts" on public.posts for
select
  using (authorize('posts.read', auth.uid()));


create policy "Allow authorized insert access" on public.posts for insert
with
  check (authorize('posts.create', auth.uid()));


create policy "Allow authorized update access" on public.posts for
update
  using (authorize('posts.edit', auth.uid()));


create policy "Allow authorized delete access" on public.posts for delete using (authorize('posts.delete', auth.uid()));


-- ASSIGN PERMISSIONS
insert into
  public.role_permissions (role, permission)
values
  ('admin', 'posts.read'),
  ('admin', 'posts.create'),
  ('admin', 'posts.delete'),
  ('admin', 'posts.edit'),
  ('moderator', 'posts.read'),
  ('moderator', 'posts.create'),
  ('moderator', 'posts.delete'),
  ('moderator', 'posts.edit');